---
import Project from "../components/project.astro";
import ChipLink from "./ChipLink.astro";
const projectFiles = import.meta.glob('/src/content/projects/*.json');
const projects = await Promise.all(
    Object.values(projectFiles).map((file) => file().then((module) => module.default))
);

function convertDate(dateString) {
    const parts = dateString.split('.');
    return new Date(`${parts[2]}-${parts[1]}-${parts[0]}`);
}

const categoryCounts = projects.reduce((acc, project) => {
    (project.category || []).forEach((category) => {
        acc[category] = (acc[category] || 0) + 1;
    });
    return acc;
}, {});

const categories = Object.keys(categoryCounts).sort((a, b) => categoryCounts[b] - categoryCounts[a]);

const years = Array.from(new Set(projects.map((p) => convertDate(p.date).getFullYear()))).sort().reverse();
---
<div class="filter-wrapper" id="filterWrapper" style="display: none">
    <!-- Dropdown for Filters -->
    <details open id="filterDropdown">
        <summary>Filters</summary>
        <div class="filter-options">
            <label for="categoryFilter" class="sr-only">Category</label>
            <select id="categoryFilter">
                <option value="all">All Categories</option>
                {categories.map((category) => (
                        <option value={category}>
                            {category} ({categoryCounts[category]})
                        </option>
                ))}
            </select>

            <label for="yearFilter" class="sr-only">Year</label>
            <select id="yearFilter">
                <option value="all">All Years</option>
                {years.map((year) => (
                        <option value={year}>{year}</option>
                ))}
            </select>

            <label for="sortFilter" class="sr-only">Sort By</label>
            <select id="sortFilter">
                <option value="Spotlight" selected hidden>Spotlight</option>
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
                <option value="az">Alphabetical (A-Z)</option>
                <option value="za">Alphabetical (Z-A)</option>
            </select>

            <button id="resetFilterButton" style="display: none;" aria-label="Reset all filters">Reset Filter</button>
        </div>
    </details>
</div>

<!-- No Projects Message -->
<div id="noProjectsMessage" style="display: none;">
    <p>Sorry, no projects are available for the selected filters.</p>
</div>

<div id="project-list">
    {projects.map((project) => (
            <div class="project-item"
                 data-categories={Array.isArray(project.category) ? project.category.join(',') : 'other'}
                 data-year={new Date(project.date).getFullYear()}
                 data-spotlight={project.spotlight ? "true" : "false"}>
                <Project
                        visible={project.visible}
                        title={project.title}
                        projectTags={project.projectTags}
                        description={project.description}
                        image={project.image}
                        collaborations={project.collaborations}
                        links={project.links}
                />
            </div>
    ))}
</div>

<div class="loadFilterButtonWrapper">
    <ChipLink
            chipType="Filter"
            chipTypeColor="#E60000"
            chipText="load more"
            url="?sort=newest#projects"
    />
</div>


<div class="loadMoreButtonWrapper">
    <ChipLink
            chipType=""
            chipTypeColor="#E60000"
            chipText="load more"
            url="?sort=newest#projects"
    />
</div>

<style>
    select, button {
        margin: 0.17rem 0 0.17rem 0.17rem;
        padding: .3rem 0.6rem;
        font-size: 1.1rem;
        border-radius: 1rem;
        border: 1px solid var(--color-text);
        background-color: white;
        font-family: 'Inter', sans-serif;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    #resetFilterButton {
        background-color: var(--color-text);
        color: var(--reset-Filter-Button-Text);
        border: 1px solid var(--color-text);
        cursor: pointer;
    }

    #filterDropdown {
        font-family: 'Inter', serif;
    }

    .filter-wrapper {
        display: flex;
        flex-wrap: wrap-reverse;
        align-items: flex-start;
        gap: 10px;
    }

    summary, label {
        color: var(--color-text);
    }

    /* Mobile Styles */
    @media (max-width: 749px) {
        .filter-wrapper {
            flex-direction: column;
            align-items: flex-start;
        }

        .filter-wrapper details {
            width: 100%;
        }

        .filter-wrapper summary {
            cursor: pointer;
            padding: 10px;
        }

        .filter-options {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            padding: 0.8rem;
            border-radius: 5px;
            margin: 8px;
        }

        #filterDropdown {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 1rem;
        }
    }

    @media (min-width: 750px) {
        .filter-wrapper {
            flex-direction: row;
        }

        .filter-options {
            display: flex;
            gap: 10px;
        }
    }

    /*hide filter label for non screenreader*/
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        margin: -1px;
        padding: 0;
        border: 0;
        clip: rect(0, 0, 0, 0);
        clip-path: inset(50%);
        white-space: nowrap;
    }

    .loadMoreButtonWrapper, .loadFilterButtonWrapper {
        visibility: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 1rem;
    }

</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const urlParams = new URLSearchParams(window.location.search);
        const selectedCategory = urlParams.get('category') || 'all';
        const selectedYear = urlParams.get('year') || 'all';
        const selectedSort = urlParams.get('sort') || 'Spotlight';
        const showSpotlight = selectedSort === 'Spotlight';

        const categoryFilter = document.getElementById("categoryFilter");
        const yearFilter = document.getElementById("yearFilter");
        const sortFilter = document.getElementById("sortFilter");
        const filterWrapper = document.getElementById("filterWrapper");
        const resetFilterButton = document.getElementById("resetFilterButton");
        const noProjectsMessage = document.getElementById("noProjectsMessage");

        categoryFilter.value = selectedCategory;
        yearFilter.value = selectedYear;
        sortFilter.value = selectedSort;

        if (selectedSort === 'Spotlight') {
            filterWrapper.style.display = "none";
        } else {
            filterWrapper.style.display = "block";
        }

        function filterProjects(category, year, sort) {
            let projectsArray = Array.from(document.querySelectorAll(".project-item"));
            let visibleProjects = 0;

            // Filter projects based on selected filters
            projectsArray.forEach((item) => {
                const projectCategories = item.dataset.categories.split(',');
                const projectYear = item.dataset.year;
                const isSpotlight = item.dataset.spotlight === "true";  // Check if the project is a spotlight project

                const matchesCategory = (category === "all" || projectCategories.includes(category));
                const matchesYear = (year === "all" || projectYear == year);
                const matchesSpotlight = (showSpotlight ? isSpotlight : true);  // If Spotlight is selected, only spotlight projects should be shown

                if (matchesCategory && matchesYear && matchesSpotlight) {
                    item.style.display = "block";
                    visibleProjects++;
                } else {
                    item.style.display = "none";
                }
            });

            // Sorting logic
            projectsArray = projectsArray.filter(item => item.style.display === "block");
            projectsArray.sort((a, b) => {
                const titleA = a.querySelector("h2")?.innerText.toLowerCase() || "";
                const titleB = b.querySelector("h2")?.innerText.toLowerCase() || "";
                const dateA = new Date(a.dataset.year).getTime();
                const dateB = new Date(b.dataset.year).getTime();

                // Sorting logic based on the selected sort option
                if (sort === "az") return titleA.localeCompare(titleB);  // Alphabetical A-Z
                if (sort === "za") return titleB.localeCompare(titleA);  // Alphabetical Z-A
                if (sort === "newest") return dateB - dateA;  // Sort by newest first (most recent date first)
                if (sort === "oldest") return dateA - dateB;  // Sort by oldest first (earliest date first)
            });

            // Apply sorted elements back into DOM
            const container = document.getElementById("project-list");
            container.innerHTML = "";
            const loadMoreButtonWrapper = document.querySelector(".loadMoreButtonWrapper");
            const loadFilterButtonWrapper = document.querySelector(".loadFilterButtonWrapper");

            if (Array.from(new URLSearchParams(window.location.search).entries()).length === 0) {
                loadFilterButtonWrapper.style.visibility = "visible";
            }


            if (projectsArray.length > 5) {
                projectsArray.slice(0, 5).forEach(item => container.appendChild(item));
                loadMoreButtonWrapper.style.visibility = "visible";
            } else {
                projectsArray.forEach(item => container.appendChild(item));
            }

            noProjectsMessage.style.display = visibleProjects === 0 ? "block" : "none";
        }

        function updateFilterAndURL() {
            const newCategory = categoryFilter.value;
            const newYear = yearFilter.value;
            const newSort = sortFilter.value;
            const newUrl = new URL(window.location);

            if (newCategory === 'all') newUrl.searchParams.delete("category");
            else newUrl.searchParams.set("category", newCategory);

            if (newYear === 'all') newUrl.searchParams.delete("year");
            else newUrl.searchParams.set("year", newYear);

            if (newSort === 'Spotlight') newUrl.searchParams.delete("sort");
            else newUrl.searchParams.set("sort", newSort);

            newUrl.hash = 'projects';

            window.location.href = newUrl.toString();
            filterProjects(newCategory, newYear, newSort);

            const shouldShowReset =
                newCategory !== "all" ||
                newYear !== "all" ||
                (newSort !== "Spotlight" && newSort !== "newest");
            resetFilterButton.style.display = shouldShowReset ? "inline-block" : "none";
        }

        filterProjects(selectedCategory, selectedYear, selectedSort);

        categoryFilter.addEventListener("change", updateFilterAndURL);
        yearFilter.addEventListener("change", updateFilterAndURL);
        sortFilter.addEventListener("change", updateFilterAndURL);

        resetFilterButton.addEventListener("click", function () {
            categoryFilter.value = "all";
            yearFilter.value = "all";
            sortFilter.value = "newest";

            const newUrl = new URL(window.location);
            newUrl.searchParams.delete("category");
            newUrl.searchParams.delete("year");
            newUrl.searchParams.delete("sort");
            window.location.href = newUrl.toString();

            filterProjects("all", "all", "newest");
            resetFilterButton.style.display = "none";

            categoryFilter.dispatchEvent(new Event("change"));
            yearFilter.dispatchEvent(new Event("change"));
            sortFilter.dispatchEvent(new Event("change"));
        });

        if (
            selectedCategory !== 'all' ||
            selectedYear !== 'all' ||
            (selectedSort !== 'Spotlight' && selectedSort !== 'newest')
        ) {
            resetFilterButton.style.display = 'inline-block';
        }
    });
</script>